--CREATE TABLE Passports (
--						PassportID INT IDENTITY(101, 1) PRIMARY KEY,
--						PassportNumber CHAR(8) NOT NULL
--						)
--INSERT INTO Passports
--	 VALUES ('N34FG21B'), ('K65LO4R7'), ('ZE657QP2')
--CREATE TABLE Persons (
--					  PersonID INT IDENTITY PRIMARY KEY,
--					  FirstName VARCHAR(15) NOT NULL,
--					  Salary DECIMAL(10, 2) NOT NULL,
--					  PassportID INT FOREIGN KEY REFERENCES Passports(PassportID)
--					  )
--INSERT INTO Persons
--	 VALUES ('Roberto', 43300.00, 102),
--			('Tom', 56100.00, 103),
--			('Yana', 60200.00, 101)

--CREATE TABLE Manufacturers (
--							ManufacturerID INT IDENTITY PRIMARY KEY,
--							[Name] VARCHAR(20) NOT NULL,
--							EstablishedOn DATE
--							)
--INSERT INTO Manufacturers
--	 VALUES ('BMW', '1916-03-07')
--		  , ('Tesla', '2003-01-01')
--		  , ('Lada', '1966-05-01')
--CREATE TABLE Models (
--					 ModelID INT IDENTITY(101, 1) PRIMARY KEY,
--					 [Name] VARCHAR(20) NOT NULL,
--					 ManufacturerID	INT FOREIGN KEY REFERENCES Manufacturers(ManufacturerID)			 
--					 )
--INSERT INTO Models
--	 VALUES ('X1', 1)
--		  , ('i6', 1)
--		  , ('Model S', 2)
--		  , ('Model X', 2)
--		  , ('Model 3', 2)
--		  , ('Nova', 3)

--CREATE TABLE Students (
--					   StudentID INT IDENTITY PRIMARY KEY,
--					   [Name] VARCHAR(20) NOT NULL
--					   )
--INSERT INTO Students
--	 VALUES ('Mila'), ('Toni'), ('Ron')
--CREATE TABLE Exams (
--					ExamID INT IDENTITY(101, 1) PRIMARY KEY,
--					[Name] VARCHAR(20) NOT NULL
--					)
--INSERT INTO Exams VALUES ('SpringMVC'), ('Neo4j'), ('Oracle 11g')
--CREATE TABLE StudentsExams (
--							StudentID INT FOREIGN KEY REFERENCES Students(StudentID),
--							ExamID INT FOREIGN KEY REFERENCES Exams(ExamID),
--							PRIMARY KEY(StudentID, ExamID)
--							)
--INSERT INTO StudentsExams
--	 VALUES (1, 101), (1, 102), (2, 101), (3, 103), (2, 102), (2, 103)

--CREATE TABLE Teachers (
--					   TeacherID INT IDENTITY(101, 1) PRIMARY KEY,
--					   [Name] VARCHAR(20) NOT NULL,
--					   ManagerID INT FOREIGN KEY REFERENCES Teachers(TeacherID)
--					   )
--INSERT INTO Teachers
--	 VALUES ('John', NULL), ('Maya', 106), ('Silvia', 106), ('Ted', 105), ('Mark', 101), ('Greta', 101)

--CREATE TABLE ItemTypes (
--						ItemTypeID INT IDENTITY PRIMARY KEY,
--						[Name] VARCHAR(100) NOT NULL
--						)
--CREATE TABLE Items (
--					ItemID INT IDENTITY PRIMARY KEY,
--					[Name] VARCHAR(100) NOT NULL,
--					ItemTypeID INT FOREIGN KEY REFERENCES ItemTypes(ItemTypeID)
--					)
--CREATE TABLE Cities (
--					 CityID INT IDENTITY PRIMARY KEY,
--					 [Name] VARCHAR(50) NOT NULL
--					 )
--CREATE TABLE Customers (
--						CustomerID INT IDENTITY PRIMARY KEY,
--						[Name] VARCHAR(50) NOT NULL,
--						Birthday DATETIME2,
--						CityID INT FOREIGN KEY REFERENCES Cities(CityID)
--						)
--CREATE TABLE Orders (
--					 OrderID INT IDENTITY PRIMARY KEY,
--					 CustomerID INT FOREIGN KEY REFERENCES Customers(CustomerID)
--					 )
--CREATE TABLE OrderItems (
--						  OrderID INT FOREIGN KEY REFERENCES Orders(OrderID),
--						  ItemID INT FOREIGN KEY REFERENCES Items(ItemID)
--						  PRIMARY KEY(OrderID, ItemID)
--						  )

--CREATE TABLE Majors (
--					 MajorID INT IDENTITY PRIMARY KEY,
--					 [Name] VARCHAR(20)
--					 )
--CREATE TABLE Students (
--					   StudentID INT IDENTITY PRIMARY KEY,
--					   StudentNumber VARCHAR(20),
--					   StudentName VARCHAR(100),
--					   MajorID INT FOREIGN KEY REFERENCES Majors(MajorID)
--					   )
--CREATE TABLE Payments (
--					   PaymentID INT IDENTITY PRIMARY KEY,
--					   PaymentDate DATE,
--					   PaymentAmount DECIMAL(8, 2),
--					   StudentID INT FOREIGN KEY REFERENCES Students(StudentID)
--					   )
--CREATE TABLE Subjects (
--					   SubjectID INT IDENTITY PRIMARY KEY,
--					   SubjectName VARCHAR(100)
--					   )
--CREATE TABLE Agenda (
--					 StudentID INT FOREIGN KEY REFERENCES Students(StudentID),
--					 SubjectID INT FOREIGN KEY REFERENCES Subjects(SubjectID),
--					 PRIMARY KEY(StudentID, SubjectID)
--					 )

--  SELECT m.MountainRange
--	   , p.PeakName
--	   , p.Elevation
--	FROM Mountains AS m
--	JOIN Peaks AS p
--	  ON p.MountainId = m.Id AND m.MountainRange = 'Rila'
--ORDER BY p.Elevation DESC